[{"/u01/code/shared-health-record/src/lib/hl7MllpSender.ts":"1","/u01/code/shared-health-record/src/workflows/labWorkflowsBw.ts":"2","/u01/code/shared-health-record/src/workflows/__tests__/labWorkflowsBw.ts":"3"},{"size":1599,"mtime":1691536925750,"results":"4","hashOfConfig":"5"},{"size":30252,"mtime":1691536926174},{"size":3190,"mtime":1691537800246},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"h0u5wi","/u01/code/shared-health-record/src/lib/hl7MllpSender.ts",["9","10","11"],[],{"ruleId":"12","severity":1,"message":"13","line":19,"column":40,"nodeType":"14","messageId":"15","endLine":19,"endColumn":43,"suggestions":"16"},{"ruleId":"12","severity":1,"message":"13","line":25,"column":75,"nodeType":"14","messageId":"15","endLine":25,"endColumn":78,"suggestions":"17"},{"ruleId":"12","severity":1,"message":"13","line":25,"column":89,"nodeType":"14","messageId":"15","endLine":25,"endColumn":92,"suggestions":"18"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["19","20"],["21","22"],["23","24"],{"messageId":"25","fix":"26","desc":"27"},{"messageId":"28","fix":"29","desc":"30"},{"messageId":"25","fix":"31","desc":"27"},{"messageId":"28","fix":"32","desc":"30"},{"messageId":"25","fix":"33","desc":"27"},{"messageId":"28","fix":"34","desc":"30"},"suggestUnknown",{"range":"35","text":"36"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"35","text":"37"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"38","text":"36"},{"range":"38","text":"37"},{"range":"39","text":"36"},{"range":"39","text":"37"},[453,456],"unknown","never",[752,755],[766,769]]
